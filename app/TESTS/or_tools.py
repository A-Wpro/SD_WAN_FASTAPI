# -*- coding: utf-8 -*-
"""or_tools.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dzeUvo1jSW6Fy8m6cOqH0cQyAvbgDU2V
"""


from ortools.linear_solver import pywraplp

import numpy as np

# Creation du solver en utilisant OR Tools
solver_lp = pywraplp.Solver('simple_lp_mip_program',pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING)
infinity = solver_lp.infinity()

# Matrice de capacite entre les noeuds
capacite = np.array([26,34,78,6,26,18,52,34,18,51])
occupation = np.array([25,34,78,6,25,18,52,34,15,51])
ones = np.ones(10)

#Var de décisions :
#x12 variable égale à 1 si on prend le chemin de 1 vers 2 
# Matrice des variables de decision
x12 = solver_lp.IntVar(0.0, 1.0, 'x12')
x13 = solver_lp.IntVar(0.0, 1.0, 'x13')
x14 = solver_lp.IntVar(0.0, 1.0, 'x14')
x23 = solver_lp.IntVar(0.0, 1.0, 'x23')
x24 = solver_lp.IntVar(0.0, 1.0, 'x24')
x34 = solver_lp.IntVar(0.0, 1.0, 'x34')
x35 = solver_lp.IntVar(0.0, 1.0, 'x35')
x45 = solver_lp.IntVar(0.0, 1.0, 'x45')
x46 = solver_lp.IntVar(0.0, 1.0, 'x46')
x56 = solver_lp.IntVar(0.0, 1.0, 'x56')

x_var = np.array([x12,x13,x14,x23,x24,x34,x35,x45,x46,x56])

# Fonction objectif
solver_lp.Minimize(np.dot(ones,x_var))

#Contraintes : 

#On part de 1
solver_lp.Add(x12 + x13 + x14 == 1)

#On arrive en 6
solver_lp.Add(x46 + x56 == 1)

#loi de conservation
solver_lp.Add(x12 - x23 - x24  == 0)
solver_lp.Add(x13 + x23 - x34 - x35 == 0)
solver_lp.Add(x14 + x24 + x34 - x45 - x46  == 0)
solver_lp.Add(x35 + x45 - x56 == 0)

#on ne depasse pas la capa max
for i in range(0,len(x_var)-1):
  solver_lp.Add(x_var[i] + occupation[i]   <= capacite[i])

#Solve
status = solver_lp.Solve()

print(status)

#Print de la solution

if status == pywraplp.Solver.OPTIMAL:
        print('Solution:')
        print('Objective (Distance) value =', solver_lp.Objective().Value())
        print('x12 =', x12.solution_value())
        print('x13 =', x13.solution_value())
        print('x14 =', x14.solution_value())
        print('x23 =', x23.solution_value())
        print('x24 =', x24.solution_value())
        print('x34 =', x34.solution_value())
        print('x35 =', x35.solution_value())
        print('x45 =', x45.solution_value())
        print('x46 =', x46.solution_value())
        print('x56 =', x56.solution_value())
else:
        print('The problem does not have an optimal solution.')

